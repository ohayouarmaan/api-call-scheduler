<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than draw.io -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" style="background-color: rgb(255, 255, 255);" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1321px" height="501px" viewBox="-0.5 -0.5 1321 501" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2024-06-04T06:11:36.104Z&quot; agent=&quot;Mozilla/5.0 (X11; Linux x86_64; rv:126.0) Gecko/20100101 Firefox/126.0&quot; etag=&quot;WjSYAwuIO5fsRc_tavCf&quot; version=&quot;24.4.13&quot; type=&quot;google&quot; scale=&quot;1&quot; border=&quot;0&quot;&gt;&#xA;  &lt;diagram name=&quot;Page-1&quot; id=&quot;JqVacrarGkOCw7EMBAna&quot;&gt;&#xA;    &lt;mxGraphModel dx=&quot;1422&quot; dy=&quot;778&quot; grid=&quot;1&quot; gridSize=&quot;10&quot; guides=&quot;1&quot; tooltips=&quot;1&quot; connect=&quot;1&quot; arrows=&quot;1&quot; fold=&quot;1&quot; page=&quot;1&quot; pageScale=&quot;1&quot; pageWidth=&quot;850&quot; pageHeight=&quot;1100&quot; math=&quot;0&quot; shadow=&quot;0&quot;&gt;&#xA;      &lt;root&gt;&#xA;        &lt;mxCell id=&quot;0&quot; /&gt;&#xA;        &lt;mxCell id=&quot;1&quot; parent=&quot;0&quot; /&gt;&#xA;        &lt;mxCell id=&quot;VZ7xfJQPOCIHc2AklDxi-6&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;VZ7xfJQPOCIHc2AklDxi-1&quot; target=&quot;VZ7xfJQPOCIHc2AklDxi-2&quot;&gt;&#xA;          &lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot; /&gt;&#xA;        &lt;/mxCell&gt;&#xA;        &lt;mxCell id=&quot;VZ7xfJQPOCIHc2AklDxi-1&quot; value=&quot;MAIN Service&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#xA;          &lt;mxGeometry x=&quot;240&quot; y=&quot;280&quot; width=&quot;160&quot; height=&quot;160&quot; as=&quot;geometry&quot; /&gt;&#xA;        &lt;/mxCell&gt;&#xA;        &lt;mxCell id=&quot;VZ7xfJQPOCIHc2AklDxi-4&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;VZ7xfJQPOCIHc2AklDxi-2&quot; target=&quot;VZ7xfJQPOCIHc2AklDxi-3&quot;&gt;&#xA;          &lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot; /&gt;&#xA;        &lt;/mxCell&gt;&#xA;        &lt;mxCell id=&quot;VZ7xfJQPOCIHc2AklDxi-2&quot; value=&quot;&amp;lt;div&amp;gt;TASK RUNNER SERVICE&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#xA;          &lt;mxGeometry x=&quot;240&quot; width=&quot;160&quot; height=&quot;160&quot; as=&quot;geometry&quot; /&gt;&#xA;        &lt;/mxCell&gt;&#xA;        &lt;mxCell id=&quot;VZ7xfJQPOCIHc2AklDxi-3&quot; value=&quot;Run API Service&quot; style=&quot;whiteSpace=wrap;html=1;aspect=fixed;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#xA;          &lt;mxGeometry x=&quot;630&quot; width=&quot;80&quot; height=&quot;80&quot; as=&quot;geometry&quot; /&gt;&#xA;        &lt;/mxCell&gt;&#xA;        &lt;mxCell id=&quot;VZ7xfJQPOCIHc2AklDxi-7&quot; value=&quot;Runs on Boot (can have multiple)&quot; style=&quot;text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#xA;          &lt;mxGeometry x=&quot;320&quot; y=&quot;218&quot; width=&quot;210&quot; height=&quot;30&quot; as=&quot;geometry&quot; /&gt;&#xA;        &lt;/mxCell&gt;&#xA;        &lt;mxCell id=&quot;VZ7xfJQPOCIHc2AklDxi-8&quot; value=&quot;&amp;lt;div&amp;gt;Spawns a new API Runner for every&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;scheduled tasks in the current time&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#xA;          &lt;mxGeometry x=&quot;400&quot; y=&quot;5&quot; width=&quot;230&quot; height=&quot;40&quot; as=&quot;geometry&quot; /&gt;&#xA;        &lt;/mxCell&gt;&#xA;        &lt;mxCell id=&quot;VZ7xfJQPOCIHc2AklDxi-9&quot; value=&quot;&amp;lt;div&amp;gt;The main service will run the Task Runner Service on boot&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;The task runner service will keep checking the database every few seconds (based on the threshold set)&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;if it finds any new task which is active and it&amp;#39;s next_execution &amp;amp;lt;= currentTime then it will spawn a new API Runner&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;the API Runner will Receive data through the parent worker through which it will call the provided API with the required KEYS&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;If the result is successful we will save the result in the database, if not we will increase the number of failures in the cronjob document&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;This type of architecture is highly scalable because if needed we can run as many task runner service we wants thus making task execution way faster&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;and once the task runner picks a task, it will mark that as &amp;quot;TAKEN&amp;quot; so that the other instances can&amp;#39;t pick that task. thus making it conflict free, and if we have a large&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;number of tasks to run at a given time it will not block the task runner service thread instead it will offload that task to the API Runner service. This way we can be assured&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;that out system will be able to handle large numbers of scheduled tasks running at once.&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;This type of system is also very fault tolerant, since even if the main services crashes for some reason our task runner service can keep running and still be able to execute all the scheduled tasks&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;and integrating it with some sort of elastic container solution will make it so that even if one of the task runner service crashes it will automatically spawn another&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;and if the API which we are trying to trigger results in an error we are also saving the failure count for further analytics&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&quot; style=&quot;text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#xA;          &lt;mxGeometry x=&quot;430&quot; y=&quot;280&quot; width=&quot;1130&quot; height=&quot;220&quot; as=&quot;geometry&quot; /&gt;&#xA;        &lt;/mxCell&gt;&#xA;        &lt;mxCell id=&quot;VZ7xfJQPOCIHc2AklDxi-10&quot; value=&quot;&amp;lt;b style=&amp;quot;font-size: 20px;&amp;quot;&amp;gt;Benefits of this system&amp;lt;br&amp;gt;&amp;lt;/b&amp;gt;&quot; style=&quot;text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#xA;          &lt;mxGeometry x=&quot;425&quot; y=&quot;248&quot; width=&quot;250&quot; height=&quot;40&quot; as=&quot;geometry&quot; /&gt;&#xA;        &lt;/mxCell&gt;&#xA;      &lt;/root&gt;&#xA;    &lt;/mxGraphModel&gt;&#xA;  &lt;/diagram&gt;&#xA;&lt;/mxfile&gt;&#xA;"><defs/><rect fill="#ffffff" width="100%" height="100%" x="0" y="0"/><g><g><path d="M 80 280 L 80 166.37" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 80 161.12 L 83.5 168.12 L 80 166.37 L 76.5 168.12 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g><g><rect x="0" y="280" width="160" height="160" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 360px; margin-left: 1px;"><div style="box-sizing: border-box; font-size: 0px; text-align: center;" data-drawio-colors="color: rgb(0, 0, 0); "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">MAIN Service</div></div></div></foreignObject><text x="80" y="364" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">MAIN Service</text></switch></g></g><g><path d="M 160 80 L 275 80 L 275 40 L 383.63 40" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 388.88 40 L 381.88 43.5 L 383.63 40 L 381.88 36.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g><g><rect x="0" y="0" width="160" height="160" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 80px; margin-left: 1px;"><div style="box-sizing: border-box; font-size: 0px; text-align: center;" data-drawio-colors="color: rgb(0, 0, 0); "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>TASK RUNNER SERVICE</div><div><br /></div></div></div></div></foreignObject><text x="80" y="84" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">TASK RUNNER SERVICE&#xa;</text></switch></g></g><g><rect x="390" y="0" width="80" height="80" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 40px; margin-left: 391px;"><div style="box-sizing: border-box; font-size: 0px; text-align: center;" data-drawio-colors="color: rgb(0, 0, 0); "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Run API Service</div></div></div></foreignObject><text x="430" y="44" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Run API Servi...</text></switch></g></g><g><rect x="80" y="218" width="210" height="30" fill="none" stroke="none" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 233px; margin-left: 185px;"><div style="box-sizing: border-box; font-size: 0px; text-align: center;" data-drawio-colors="color: rgb(0, 0, 0); "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: nowrap;">Runs on Boot (can have multiple)</div></div></div></foreignObject><text x="185" y="237" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Runs on Boot (can have multiple)</text></switch></g></g><g><rect x="160" y="5" width="230" height="40" fill="none" stroke="none" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 25px; margin-left: 275px;"><div style="box-sizing: border-box; font-size: 0px; text-align: center;" data-drawio-colors="color: rgb(0, 0, 0); "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: nowrap;"><div>Spawns a new API Runner for every</div><div>scheduled tasks in the current time<br /></div></div></div></div></foreignObject><text x="275" y="29" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Spawns a new API Runner for every...</text></switch></g></g><g><rect x="190" y="280" width="1130" height="220" fill="none" stroke="none" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1px; height: 1px; padding-top: 390px; margin-left: 192px;"><div style="box-sizing: border-box; font-size: 0px; text-align: left;" data-drawio-colors="color: rgb(0, 0, 0); "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: nowrap;"><div>The main service will run the Task Runner Service on boot</div><div>The task runner service will keep checking the database every few seconds (based on the threshold set)</div><div>if it finds any new task which is active and it's next_execution &lt;= currentTime then it will spawn a new API Runner</div><div>the API Runner will Receive data through the parent worker through which it will call the provided API with the required KEYS</div><div>If the result is successful we will save the result in the database, if not we will increase the number of failures in the cronjob document</div><div><br /></div><div>This type of architecture is highly scalable because if needed we can run as many task runner service we wants thus making task execution way faster</div><div>and once the task runner picks a task, it will mark that as "TAKEN" so that the other instances can't pick that task. thus making it conflict free, and if we have a large</div><div>number of tasks to run at a given time it will not block the task runner service thread instead it will offload that task to the API Runner service. This way we can be assured</div><div>that out system will be able to handle large numbers of scheduled tasks running at once.</div><div><br /></div><div>This type of system is also very fault tolerant, since even if the main services crashes for some reason our task runner service can keep running and still be able to execute all the scheduled tasks</div><div>and integrating it with some sort of elastic container solution will make it so that even if one of the task runner service crashes it will automatically spawn another</div><div>and if the API which we are trying to trigger results in an error we are also saving the failure count for further analytics<br /></div></div></div></div></foreignObject><text x="192" y="394" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">The main service will run the Task Runner Service on boot...</text></switch></g></g><g><rect x="185" y="248" width="250" height="40" fill="none" stroke="none" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 268px; margin-left: 310px;"><div style="box-sizing: border-box; font-size: 0px; text-align: center;" data-drawio-colors="color: rgb(0, 0, 0); "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: nowrap;"><b style="font-size: 20px;">Benefits of this system<br /></b></div></div></div></foreignObject><text x="310" y="272" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Benefits of this system&#xa;</text></switch></g></g></g></svg>